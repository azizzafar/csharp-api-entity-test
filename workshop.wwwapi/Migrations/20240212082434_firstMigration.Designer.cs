// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using workshop.wwwapi.Data;

#nullable disable

namespace workshop.wwwapi.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240212082434_firstMigration")]
    partial class firstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("workshop.wwwapi.Models.Appointment", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("integer")
                        .HasColumnName("patient_id");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer")
                        .HasColumnName("doctor_id");

                    b.Property<DateTimeOffset>("Booking")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.HasKey("PatientId", "DoctorId");

                    b.HasIndex("DoctorId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            PatientId = 16,
                            DoctorId = 1,
                            Booking = new DateTimeOffset(new DateTime(2024, 1, 29, 9, 24, 33, 735, DateTimeKind.Unspecified).AddTicks(9051), new TimeSpan(0, 1, 0, 0, 0)),
                            Id = 1
                        },
                        new
                        {
                            PatientId = 2,
                            DoctorId = 2,
                            Booking = new DateTimeOffset(new DateTime(2024, 2, 19, 9, 24, 33, 735, DateTimeKind.Unspecified).AddTicks(9157), new TimeSpan(0, 1, 0, 0, 0)),
                            Id = 2
                        },
                        new
                        {
                            PatientId = 4,
                            DoctorId = 1,
                            Booking = new DateTimeOffset(new DateTime(2024, 1, 28, 9, 24, 33, 735, DateTimeKind.Unspecified).AddTicks(9162), new TimeSpan(0, 1, 0, 0, 0)),
                            Id = 3
                        },
                        new
                        {
                            PatientId = 1,
                            DoctorId = 5,
                            Booking = new DateTimeOffset(new DateTime(2024, 2, 13, 9, 24, 33, 735, DateTimeKind.Unspecified).AddTicks(9195), new TimeSpan(0, 1, 0, 0, 0)),
                            Id = 4
                        },
                        new
                        {
                            PatientId = 3,
                            DoctorId = 5,
                            Booking = new DateTimeOffset(new DateTime(2024, 2, 3, 9, 24, 33, 735, DateTimeKind.Unspecified).AddTicks(9203), new TimeSpan(0, 1, 0, 0, 0)),
                            Id = 5
                        },
                        new
                        {
                            PatientId = 13,
                            DoctorId = 5,
                            Booking = new DateTimeOffset(new DateTime(2024, 2, 25, 9, 24, 33, 735, DateTimeKind.Unspecified).AddTicks(9208), new TimeSpan(0, 1, 0, 0, 0)),
                            Id = 6
                        },
                        new
                        {
                            PatientId = 4,
                            DoctorId = 4,
                            Booking = new DateTimeOffset(new DateTime(2024, 3, 4, 9, 24, 33, 735, DateTimeKind.Unspecified).AddTicks(9212), new TimeSpan(0, 1, 0, 0, 0)),
                            Id = 7
                        },
                        new
                        {
                            PatientId = 16,
                            DoctorId = 4,
                            Booking = new DateTimeOffset(new DateTime(2024, 1, 29, 9, 24, 33, 735, DateTimeKind.Unspecified).AddTicks(9215), new TimeSpan(0, 1, 0, 0, 0)),
                            Id = 8
                        },
                        new
                        {
                            PatientId = 12,
                            DoctorId = 5,
                            Booking = new DateTimeOffset(new DateTime(2024, 2, 20, 9, 24, 33, 735, DateTimeKind.Unspecified).AddTicks(9220), new TimeSpan(0, 1, 0, 0, 0)),
                            Id = 9
                        },
                        new
                        {
                            PatientId = 14,
                            DoctorId = 3,
                            Booking = new DateTimeOffset(new DateTime(2024, 2, 24, 9, 24, 33, 735, DateTimeKind.Unspecified).AddTicks(9224), new TimeSpan(0, 1, 0, 0, 0)),
                            Id = 10
                        },
                        new
                        {
                            PatientId = 9,
                            DoctorId = 3,
                            Booking = new DateTimeOffset(new DateTime(2024, 2, 22, 9, 24, 33, 735, DateTimeKind.Unspecified).AddTicks(9228), new TimeSpan(0, 1, 0, 0, 0)),
                            Id = 11
                        },
                        new
                        {
                            PatientId = 18,
                            DoctorId = 3,
                            Booking = new DateTimeOffset(new DateTime(2024, 3, 1, 9, 24, 33, 735, DateTimeKind.Unspecified).AddTicks(9238), new TimeSpan(0, 1, 0, 0, 0)),
                            Id = 14
                        },
                        new
                        {
                            PatientId = 4,
                            DoctorId = 5,
                            Booking = new DateTimeOffset(new DateTime(2024, 2, 12, 9, 24, 33, 735, DateTimeKind.Unspecified).AddTicks(9241), new TimeSpan(0, 1, 0, 0, 0)),
                            Id = 15
                        },
                        new
                        {
                            PatientId = 10,
                            DoctorId = 5,
                            Booking = new DateTimeOffset(new DateTime(2024, 2, 10, 9, 24, 33, 735, DateTimeKind.Unspecified).AddTicks(9244), new TimeSpan(0, 1, 0, 0, 0)),
                            Id = 16
                        },
                        new
                        {
                            PatientId = 5,
                            DoctorId = 5,
                            Booking = new DateTimeOffset(new DateTime(2024, 2, 23, 9, 24, 33, 735, DateTimeKind.Unspecified).AddTicks(9247), new TimeSpan(0, 1, 0, 0, 0)),
                            Id = 17
                        },
                        new
                        {
                            PatientId = 1,
                            DoctorId = 4,
                            Booking = new DateTimeOffset(new DateTime(2024, 2, 21, 9, 24, 33, 735, DateTimeKind.Unspecified).AddTicks(9250), new TimeSpan(0, 1, 0, 0, 0)),
                            Id = 18
                        },
                        new
                        {
                            PatientId = 18,
                            DoctorId = 4,
                            Booking = new DateTimeOffset(new DateTime(2024, 2, 13, 9, 24, 33, 735, DateTimeKind.Unspecified).AddTicks(9253), new TimeSpan(0, 1, 0, 0, 0)),
                            Id = 19
                        },
                        new
                        {
                            PatientId = 8,
                            DoctorId = 1,
                            Booking = new DateTimeOffset(new DateTime(2024, 2, 29, 9, 24, 33, 735, DateTimeKind.Unspecified).AddTicks(9256), new TimeSpan(0, 1, 0, 0, 0)),
                            Id = 20
                        });
                });

            modelBuilder.Entity("workshop.wwwapi.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.HasKey("Id");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FullName = "Donald Middleton"
                        },
                        new
                        {
                            Id = 2,
                            FullName = "Mick Jagger"
                        },
                        new
                        {
                            Id = 3,
                            FullName = "Oprah Hepburn"
                        },
                        new
                        {
                            Id = 4,
                            FullName = "Jimi Hendrix"
                        },
                        new
                        {
                            Id = 5,
                            FullName = "Jimi Winfrey"
                        });
                });

            modelBuilder.Entity("workshop.wwwapi.Models.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("Id");

                    b.ToTable("Medicines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Aspirin",
                            Notes = "Take with food",
                            Quantity = 19
                        },
                        new
                        {
                            Id = 2,
                            Name = "Ibuprofen",
                            Notes = "Take on an empty stomach",
                            Quantity = 33
                        },
                        new
                        {
                            Id = 3,
                            Name = "Paracetamol",
                            Notes = "Take with food",
                            Quantity = 21
                        },
                        new
                        {
                            Id = 4,
                            Name = "Omeprazole",
                            Notes = "Avoid alcohol while taking",
                            Quantity = 12
                        },
                        new
                        {
                            Id = 5,
                            Name = "Lisinopril",
                            Notes = "Take with meals",
                            Quantity = 15
                        },
                        new
                        {
                            Id = 6,
                            Name = "Simvastatin",
                            Notes = "Take with meals",
                            Quantity = 23
                        },
                        new
                        {
                            Id = 7,
                            Name = "Metformin",
                            Notes = "Take with food",
                            Quantity = 21
                        },
                        new
                        {
                            Id = 8,
                            Name = "Amlodipine",
                            Notes = "Take with plenty of water",
                            Quantity = 29
                        },
                        new
                        {
                            Id = 9,
                            Name = "Atorvastatin",
                            Notes = "Take with meals",
                            Quantity = 24
                        },
                        new
                        {
                            Id = 10,
                            Name = "Hydrocodone",
                            Notes = "Take before bedtime",
                            Quantity = 28
                        });
                });

            modelBuilder.Entity("workshop.wwwapi.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.HasKey("Id");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FullName = "Kate Obama"
                        },
                        new
                        {
                            Id = 2,
                            FullName = "Kate Windsor"
                        },
                        new
                        {
                            Id = 3,
                            FullName = "Jimi Winfrey"
                        },
                        new
                        {
                            Id = 4,
                            FullName = "Kate Hepburn"
                        },
                        new
                        {
                            Id = 5,
                            FullName = "Oprah Winslet"
                        },
                        new
                        {
                            Id = 6,
                            FullName = "Kate Hepburn"
                        },
                        new
                        {
                            Id = 7,
                            FullName = "Oprah Winfrey"
                        },
                        new
                        {
                            Id = 8,
                            FullName = "Kate Winslet"
                        },
                        new
                        {
                            Id = 9,
                            FullName = "Kate Hendrix"
                        },
                        new
                        {
                            Id = 10,
                            FullName = "Elvis Obama"
                        },
                        new
                        {
                            Id = 11,
                            FullName = "Mick Obama"
                        },
                        new
                        {
                            Id = 12,
                            FullName = "Elvis Middleton"
                        },
                        new
                        {
                            Id = 13,
                            FullName = "Charles Hepburn"
                        },
                        new
                        {
                            Id = 14,
                            FullName = "Kate Winfrey"
                        },
                        new
                        {
                            Id = 15,
                            FullName = "Elvis Windsor"
                        },
                        new
                        {
                            Id = 16,
                            FullName = "Audrey Jagger"
                        },
                        new
                        {
                            Id = 17,
                            FullName = "Elvis Hendrix"
                        },
                        new
                        {
                            Id = 18,
                            FullName = "Oprah Presley"
                        },
                        new
                        {
                            Id = 19,
                            FullName = "Kate Hendrix"
                        },
                        new
                        {
                            Id = 20,
                            FullName = "Kate Middleton"
                        });
                });

            modelBuilder.Entity("workshop.wwwapi.Models.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer")
                        .HasColumnName("doctor_id");

                    b.Property<DateTimeOffset>("IssuedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("issue_date");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer")
                        .HasColumnName("patient_id");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Prescriptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DoctorId = 2,
                            IssuedAt = new DateTimeOffset(new DateTime(2024, 1, 17, 9, 24, 33, 735, DateTimeKind.Unspecified).AddTicks(9271), new TimeSpan(0, 1, 0, 0, 0)),
                            PatientId = 6
                        },
                        new
                        {
                            Id = 2,
                            DoctorId = 4,
                            IssuedAt = new DateTimeOffset(new DateTime(2024, 1, 29, 9, 24, 33, 735, DateTimeKind.Unspecified).AddTicks(9304), new TimeSpan(0, 1, 0, 0, 0)),
                            PatientId = 9
                        },
                        new
                        {
                            Id = 3,
                            DoctorId = 5,
                            IssuedAt = new DateTimeOffset(new DateTime(2024, 2, 5, 9, 24, 33, 735, DateTimeKind.Unspecified).AddTicks(9310), new TimeSpan(0, 1, 0, 0, 0)),
                            PatientId = 11
                        },
                        new
                        {
                            Id = 4,
                            DoctorId = 1,
                            IssuedAt = new DateTimeOffset(new DateTime(2024, 2, 4, 9, 24, 33, 735, DateTimeKind.Unspecified).AddTicks(9313), new TimeSpan(0, 1, 0, 0, 0)),
                            PatientId = 14
                        },
                        new
                        {
                            Id = 5,
                            DoctorId = 1,
                            IssuedAt = new DateTimeOffset(new DateTime(2024, 2, 7, 9, 24, 33, 735, DateTimeKind.Unspecified).AddTicks(9317), new TimeSpan(0, 1, 0, 0, 0)),
                            PatientId = 3
                        },
                        new
                        {
                            Id = 6,
                            DoctorId = 1,
                            IssuedAt = new DateTimeOffset(new DateTime(2024, 2, 5, 9, 24, 33, 735, DateTimeKind.Unspecified).AddTicks(9322), new TimeSpan(0, 1, 0, 0, 0)),
                            PatientId = 1
                        },
                        new
                        {
                            Id = 7,
                            DoctorId = 4,
                            IssuedAt = new DateTimeOffset(new DateTime(2024, 1, 16, 9, 24, 33, 735, DateTimeKind.Unspecified).AddTicks(9325), new TimeSpan(0, 1, 0, 0, 0)),
                            PatientId = 9
                        },
                        new
                        {
                            Id = 8,
                            DoctorId = 5,
                            IssuedAt = new DateTimeOffset(new DateTime(2024, 1, 27, 9, 24, 33, 735, DateTimeKind.Unspecified).AddTicks(9330), new TimeSpan(0, 1, 0, 0, 0)),
                            PatientId = 4
                        },
                        new
                        {
                            Id = 9,
                            DoctorId = 3,
                            IssuedAt = new DateTimeOffset(new DateTime(2024, 2, 7, 9, 24, 33, 735, DateTimeKind.Unspecified).AddTicks(9334), new TimeSpan(0, 1, 0, 0, 0)),
                            PatientId = 8
                        },
                        new
                        {
                            Id = 10,
                            DoctorId = 5,
                            IssuedAt = new DateTimeOffset(new DateTime(2024, 1, 26, 9, 24, 33, 735, DateTimeKind.Unspecified).AddTicks(9338), new TimeSpan(0, 1, 0, 0, 0)),
                            PatientId = 3
                        });
                });

            modelBuilder.Entity("workshop.wwwapi.Models.PrescriptionMedicine", b =>
                {
                    b.Property<int>("PrescriptionId")
                        .HasColumnType("integer");

                    b.Property<int>("MedicineId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("PrescriptionId", "MedicineId");

                    b.HasIndex("MedicineId");

                    b.ToTable("PrescriptionMedicines");

                    b.HasData(
                        new
                        {
                            PrescriptionId = 1,
                            MedicineId = 2,
                            Notes = "Do not exceed recommended dosage",
                            Quantity = 1
                        },
                        new
                        {
                            PrescriptionId = 1,
                            MedicineId = 1,
                            Notes = "Take on an empty stomach",
                            Quantity = 3
                        },
                        new
                        {
                            PrescriptionId = 2,
                            MedicineId = 5,
                            Notes = "Avoid alcohol while taking",
                            Quantity = 1
                        },
                        new
                        {
                            PrescriptionId = 2,
                            MedicineId = 1,
                            Notes = "Take with food",
                            Quantity = 3
                        },
                        new
                        {
                            PrescriptionId = 2,
                            MedicineId = 3,
                            Notes = "Take with meals",
                            Quantity = 1
                        },
                        new
                        {
                            PrescriptionId = 3,
                            MedicineId = 4,
                            Notes = "Avoid alcohol while taking",
                            Quantity = 2
                        },
                        new
                        {
                            PrescriptionId = 3,
                            MedicineId = 1,
                            Notes = "Take with meals",
                            Quantity = 3
                        },
                        new
                        {
                            PrescriptionId = 3,
                            MedicineId = 5,
                            Notes = "Take with plenty of water",
                            Quantity = 4
                        },
                        new
                        {
                            PrescriptionId = 4,
                            MedicineId = 1,
                            Notes = "Take with food",
                            Quantity = 4
                        },
                        new
                        {
                            PrescriptionId = 5,
                            MedicineId = 1,
                            Notes = "Take with plenty of water",
                            Quantity = 2
                        },
                        new
                        {
                            PrescriptionId = 5,
                            MedicineId = 5,
                            Notes = "Take with plenty of water",
                            Quantity = 4
                        },
                        new
                        {
                            PrescriptionId = 5,
                            MedicineId = 3,
                            Notes = "Take before bedtime",
                            Quantity = 4
                        },
                        new
                        {
                            PrescriptionId = 6,
                            MedicineId = 4,
                            Notes = "Take with food",
                            Quantity = 3
                        },
                        new
                        {
                            PrescriptionId = 7,
                            MedicineId = 5,
                            Notes = "Take on an empty stomach",
                            Quantity = 4
                        },
                        new
                        {
                            PrescriptionId = 7,
                            MedicineId = 3,
                            Notes = "Avoid alcohol while taking",
                            Quantity = 2
                        },
                        new
                        {
                            PrescriptionId = 7,
                            MedicineId = 2,
                            Notes = "Take with meals",
                            Quantity = 1
                        },
                        new
                        {
                            PrescriptionId = 8,
                            MedicineId = 2,
                            Notes = "Do not exceed recommended dosage",
                            Quantity = 1
                        },
                        new
                        {
                            PrescriptionId = 8,
                            MedicineId = 4,
                            Notes = "Take with meals",
                            Quantity = 1
                        },
                        new
                        {
                            PrescriptionId = 9,
                            MedicineId = 4,
                            Notes = "Take before bedtime",
                            Quantity = 1
                        },
                        new
                        {
                            PrescriptionId = 9,
                            MedicineId = 2,
                            Notes = "Take on an empty stomach",
                            Quantity = 3
                        },
                        new
                        {
                            PrescriptionId = 10,
                            MedicineId = 4,
                            Notes = "Take with meals",
                            Quantity = 1
                        },
                        new
                        {
                            PrescriptionId = 10,
                            MedicineId = 5,
                            Notes = "Take before bedtime",
                            Quantity = 2
                        });
                });

            modelBuilder.Entity("workshop.wwwapi.Models.Appointment", b =>
                {
                    b.HasOne("workshop.wwwapi.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("workshop.wwwapi.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("workshop.wwwapi.Models.Prescription", b =>
                {
                    b.HasOne("workshop.wwwapi.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("workshop.wwwapi.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("workshop.wwwapi.Models.PrescriptionMedicine", b =>
                {
                    b.HasOne("workshop.wwwapi.Models.Medicine", "Medicine")
                        .WithMany("PrescriptionMedicines")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("workshop.wwwapi.Models.Prescription", "Prescription")
                        .WithMany("PrescriptionMedicines")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("workshop.wwwapi.Models.Doctor", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("workshop.wwwapi.Models.Medicine", b =>
                {
                    b.Navigation("PrescriptionMedicines");
                });

            modelBuilder.Entity("workshop.wwwapi.Models.Patient", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("workshop.wwwapi.Models.Prescription", b =>
                {
                    b.Navigation("PrescriptionMedicines");
                });
#pragma warning restore 612, 618
        }
    }
}
